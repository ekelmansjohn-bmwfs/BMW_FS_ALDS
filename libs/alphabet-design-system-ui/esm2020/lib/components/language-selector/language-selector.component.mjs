/* eslint-disable functional/immutable-data */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, Output, } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/forms";
import * as i3 from "../form-dropdown/form-dropdown.component";
export class ADSLanguageSelectorComponent {
    constructor(cdr) {
        this.cdr = cdr;
        this.currentLanguage = '';
        this.languageChangeEmitter = new EventEmitter();
    }
    switchLanguage(language) {
        this.currentLanguage = language;
        this.updateCurrentLanguageObject();
        this.languageChangeEmitter.emit(language);
    }
    trackByCode(index, el) {
        return el.code;
    }
    ngOnChanges(changes) {
        const { currentLanguage, availableLanguages } = changes;
        if (currentLanguage) {
            this.currentLanguage = currentLanguage.currentValue;
        }
        if (availableLanguages) {
            this.availableLanguages = availableLanguages.currentValue;
        }
        if (currentLanguage || availableLanguages) {
            this.updateCurrentLanguageObject();
            this.cdr.detectChanges();
        }
    }
    updateCurrentLanguageObject() {
        this.currentLanguageObject = this.availableLanguages.find(language => language.code === this.currentLanguage);
    }
}
ADSLanguageSelectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.6", ngImport: i0, type: ADSLanguageSelectorComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
ADSLanguageSelectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.6", type: ADSLanguageSelectorComponent, selector: "ads-language-selector", inputs: { currentLanguage: "currentLanguage", availableLanguages: "availableLanguages", css: "css" }, outputs: { languageChangeEmitter: "languageChangeEmitter" }, usesOnChanges: true, ngImport: i0, template: "<ng-container *ngIf=\"currentLanguage\">\r\n    <ads-form-dropdown\r\n        [(ngModel)]=\"currentLanguage\"\r\n        label=\"{{ currentLanguageObject?.label ?? '' }}\"\r\n        ariaLabelledBy=\"Language\"\r\n        i18n-ariaLabelledBy=\"@@AlphabetPortalLanguageSelectorTitle\"\r\n        [hideLabel]=\"true\"\r\n        (ngModelChange)=\"switchLanguage($event)\"\r\n        css=\"is-language-selector {{ css }}\"\r\n    >\r\n        <ul>\r\n            <li\r\n                *ngFor=\"let language of availableLanguages; trackBy: trackByCode\"\r\n                attr.data-value=\"{{ language.code }}\"\r\n                attr.data-test-id=\"ads-language-selector-option-{{ language.code }}\"\r\n                attr.data-label=\"{{ language.label }}\"\r\n            >\r\n                <img\r\n                    src=\"assets/images/flag-{{ language.localeExtension }}.png\"\r\n                    class=\"mr-4\"\r\n                    alt=\"{{ language.label }}\"\r\n                />\r\n                {{ language.label }}\r\n            </li>\r\n        </ul>\r\n        <figure *ngIf=\"currentLanguageObject\" class=\"language-selector_flag\">\r\n            <img\r\n                src=\"assets/images/flag-{{ currentLanguageObject.localeExtension }}.png\"\r\n                alt=\"{{ currentLanguageObject.label }}\"\r\n            />\r\n        </figure>\r\n    </ads-form-dropdown>\r\n</ng-container>\r\n", styles: [""], dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i3.ADSFormDropdownComponent, selector: "ads-form-dropdown", inputs: ["css", "disabled", "hideLabel", "label", "ariaLabelledBy"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.6", ngImport: i0, type: ADSLanguageSelectorComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ads-language-selector', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container *ngIf=\"currentLanguage\">\r\n    <ads-form-dropdown\r\n        [(ngModel)]=\"currentLanguage\"\r\n        label=\"{{ currentLanguageObject?.label ?? '' }}\"\r\n        ariaLabelledBy=\"Language\"\r\n        i18n-ariaLabelledBy=\"@@AlphabetPortalLanguageSelectorTitle\"\r\n        [hideLabel]=\"true\"\r\n        (ngModelChange)=\"switchLanguage($event)\"\r\n        css=\"is-language-selector {{ css }}\"\r\n    >\r\n        <ul>\r\n            <li\r\n                *ngFor=\"let language of availableLanguages; trackBy: trackByCode\"\r\n                attr.data-value=\"{{ language.code }}\"\r\n                attr.data-test-id=\"ads-language-selector-option-{{ language.code }}\"\r\n                attr.data-label=\"{{ language.label }}\"\r\n            >\r\n                <img\r\n                    src=\"assets/images/flag-{{ language.localeExtension }}.png\"\r\n                    class=\"mr-4\"\r\n                    alt=\"{{ language.label }}\"\r\n                />\r\n                {{ language.label }}\r\n            </li>\r\n        </ul>\r\n        <figure *ngIf=\"currentLanguageObject\" class=\"language-selector_flag\">\r\n            <img\r\n                src=\"assets/images/flag-{{ currentLanguageObject.localeExtension }}.png\"\r\n                alt=\"{{ currentLanguageObject.label }}\"\r\n            />\r\n        </figure>\r\n    </ads-form-dropdown>\r\n</ng-container>\r\n" }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { currentLanguage: [{
                type: Input
            }], availableLanguages: [{
                type: Input
            }], css: [{
                type: Input
            }], languageChangeEmitter: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFuZ3VhZ2Utc2VsZWN0b3IuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9hbHBoYWJldC1kZXNpZ24tc3lzdGVtLXVpL3NyYy9saWIvY29tcG9uZW50cy9sYW5ndWFnZS1zZWxlY3Rvci9sYW5ndWFnZS1zZWxlY3Rvci5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2FscGhhYmV0LWRlc2lnbi1zeXN0ZW0tdWkvc3JjL2xpYi9jb21wb25lbnRzL2xhbmd1YWdlLXNlbGVjdG9yL2xhbmd1YWdlLXNlbGVjdG9yLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDhDQUE4QztBQUM5QyxPQUFPLEVBQ0gsdUJBQXVCLEVBQ3ZCLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsWUFBWSxFQUNaLEtBQUssRUFFTCxNQUFNLEdBRVQsTUFBTSxlQUFlLENBQUM7Ozs7O0FBUXZCLE1BQU0sT0FBTyw0QkFBNEI7SUFRckMsWUFBNkIsR0FBc0I7UUFBdEIsUUFBRyxHQUFILEdBQUcsQ0FBbUI7UUFQMUMsb0JBQWUsR0FBRyxFQUFFLENBQUM7UUFHWCwwQkFBcUIsR0FBeUIsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUk5QixDQUFDO0lBRXZELGNBQWMsQ0FBQyxRQUFnQjtRQUMzQixJQUFJLENBQUMsZUFBZSxHQUFHLFFBQVEsQ0FBQztRQUNoQyxJQUFJLENBQUMsMkJBQTJCLEVBQUUsQ0FBQztRQUNuQyxJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRCxXQUFXLENBQUMsS0FBYSxFQUFFLEVBQWdCO1FBQ3ZDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQztJQUNuQixDQUFDO0lBRUQsV0FBVyxDQUFDLE9BQXNCO1FBQzlCLE1BQU0sRUFBRSxlQUFlLEVBQUUsa0JBQWtCLEVBQUUsR0FBRyxPQUFPLENBQUM7UUFFeEQsSUFBSSxlQUFlLEVBQUU7WUFDakIsSUFBSSxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUMsWUFBWSxDQUFDO1NBQ3ZEO1FBRUQsSUFBSSxrQkFBa0IsRUFBRTtZQUNwQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUMsWUFBWSxDQUFDO1NBQzdEO1FBRUQsSUFBSSxlQUFlLElBQUksa0JBQWtCLEVBQUU7WUFDdkMsSUFBSSxDQUFDLDJCQUEyQixFQUFFLENBQUM7WUFDbkMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsQ0FBQztTQUM1QjtJQUNMLENBQUM7SUFFTywyQkFBMkI7UUFDL0IsSUFBSSxDQUFDLHFCQUFxQixHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQ3JELFFBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsZUFBZSxDQUNyRCxDQUFDO0lBQ04sQ0FBQzs7eUhBekNRLDRCQUE0Qjs2R0FBNUIsNEJBQTRCLHFQQ2xCekMsbTVDQWlDQTsyRkRmYSw0QkFBNEI7a0JBTnhDLFNBQVM7K0JBQ0ksdUJBQXVCLG1CQUdoQix1QkFBdUIsQ0FBQyxNQUFNO3dHQUd0QyxlQUFlO3NCQUF2QixLQUFLO2dCQUNHLGtCQUFrQjtzQkFBMUIsS0FBSztnQkFDRyxHQUFHO3NCQUFYLEtBQUs7Z0JBQ2EscUJBQXFCO3NCQUF2QyxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgZnVuY3Rpb25hbC9pbW11dGFibGUtZGF0YSAqL1xyXG5pbXBvcnQge1xyXG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXHJcbiAgICBDaGFuZ2VEZXRlY3RvclJlZixcclxuICAgIENvbXBvbmVudCxcclxuICAgIEV2ZW50RW1pdHRlcixcclxuICAgIElucHV0LFxyXG4gICAgT25DaGFuZ2VzLFxyXG4gICAgT3V0cHV0LFxyXG4gICAgU2ltcGxlQ2hhbmdlcyxcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSUFEU0xhbmd1YWdlIH0gZnJvbSAnLi4vLi4vdHlwZXMnO1xyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnYWRzLWxhbmd1YWdlLXNlbGVjdG9yJyxcclxuICAgIHRlbXBsYXRlVXJsOiAnLi9sYW5ndWFnZS1zZWxlY3Rvci5jb21wb25lbnQuaHRtbCcsXHJcbiAgICBzdHlsZVVybHM6IFsnLi9sYW5ndWFnZS1zZWxlY3Rvci5jb21wb25lbnQuc2NzcyddLFxyXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBBRFNMYW5ndWFnZVNlbGVjdG9yQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcclxuICAgIEBJbnB1dCgpIGN1cnJlbnRMYW5ndWFnZSA9ICcnO1xyXG4gICAgQElucHV0KCkgYXZhaWxhYmxlTGFuZ3VhZ2VzITogUmVhZG9ubHlBcnJheTxJQURTTGFuZ3VhZ2U+O1xyXG4gICAgQElucHV0KCkgY3NzITogc3RyaW5nO1xyXG4gICAgQE91dHB1dCgpIHJlYWRvbmx5IGxhbmd1YWdlQ2hhbmdlRW1pdHRlcjogRXZlbnRFbWl0dGVyPHN0cmluZz4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gICAgY3VycmVudExhbmd1YWdlT2JqZWN0OiBJQURTTGFuZ3VhZ2UgfCB1bmRlZmluZWQ7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBjZHI6IENoYW5nZURldGVjdG9yUmVmKSB7fVxyXG5cclxuICAgIHN3aXRjaExhbmd1YWdlKGxhbmd1YWdlOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLmN1cnJlbnRMYW5ndWFnZSA9IGxhbmd1YWdlO1xyXG4gICAgICAgIHRoaXMudXBkYXRlQ3VycmVudExhbmd1YWdlT2JqZWN0KCk7XHJcbiAgICAgICAgdGhpcy5sYW5ndWFnZUNoYW5nZUVtaXR0ZXIuZW1pdChsYW5ndWFnZSk7XHJcbiAgICB9XHJcblxyXG4gICAgdHJhY2tCeUNvZGUoaW5kZXg6IG51bWJlciwgZWw6IElBRFNMYW5ndWFnZSkge1xyXG4gICAgICAgIHJldHVybiBlbC5jb2RlO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCB7IGN1cnJlbnRMYW5ndWFnZSwgYXZhaWxhYmxlTGFuZ3VhZ2VzIH0gPSBjaGFuZ2VzO1xyXG5cclxuICAgICAgICBpZiAoY3VycmVudExhbmd1YWdlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudExhbmd1YWdlID0gY3VycmVudExhbmd1YWdlLmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChhdmFpbGFibGVMYW5ndWFnZXMpIHtcclxuICAgICAgICAgICAgdGhpcy5hdmFpbGFibGVMYW5ndWFnZXMgPSBhdmFpbGFibGVMYW5ndWFnZXMuY3VycmVudFZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGN1cnJlbnRMYW5ndWFnZSB8fCBhdmFpbGFibGVMYW5ndWFnZXMpIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVDdXJyZW50TGFuZ3VhZ2VPYmplY3QoKTtcclxuICAgICAgICAgICAgdGhpcy5jZHIuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHVwZGF0ZUN1cnJlbnRMYW5ndWFnZU9iamVjdCgpIHtcclxuICAgICAgICB0aGlzLmN1cnJlbnRMYW5ndWFnZU9iamVjdCA9IHRoaXMuYXZhaWxhYmxlTGFuZ3VhZ2VzLmZpbmQoXHJcbiAgICAgICAgICAgIGxhbmd1YWdlID0+IGxhbmd1YWdlLmNvZGUgPT09IHRoaXMuY3VycmVudExhbmd1YWdlLFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuIiwiPG5nLWNvbnRhaW5lciAqbmdJZj1cImN1cnJlbnRMYW5ndWFnZVwiPlxyXG4gICAgPGFkcy1mb3JtLWRyb3Bkb3duXHJcbiAgICAgICAgWyhuZ01vZGVsKV09XCJjdXJyZW50TGFuZ3VhZ2VcIlxyXG4gICAgICAgIGxhYmVsPVwie3sgY3VycmVudExhbmd1YWdlT2JqZWN0Py5sYWJlbCA/PyAnJyB9fVwiXHJcbiAgICAgICAgYXJpYUxhYmVsbGVkQnk9XCJMYW5ndWFnZVwiXHJcbiAgICAgICAgaTE4bi1hcmlhTGFiZWxsZWRCeT1cIkBAQWxwaGFiZXRQb3J0YWxMYW5ndWFnZVNlbGVjdG9yVGl0bGVcIlxyXG4gICAgICAgIFtoaWRlTGFiZWxdPVwidHJ1ZVwiXHJcbiAgICAgICAgKG5nTW9kZWxDaGFuZ2UpPVwic3dpdGNoTGFuZ3VhZ2UoJGV2ZW50KVwiXHJcbiAgICAgICAgY3NzPVwiaXMtbGFuZ3VhZ2Utc2VsZWN0b3Ige3sgY3NzIH19XCJcclxuICAgID5cclxuICAgICAgICA8dWw+XHJcbiAgICAgICAgICAgIDxsaVxyXG4gICAgICAgICAgICAgICAgKm5nRm9yPVwibGV0IGxhbmd1YWdlIG9mIGF2YWlsYWJsZUxhbmd1YWdlczsgdHJhY2tCeTogdHJhY2tCeUNvZGVcIlxyXG4gICAgICAgICAgICAgICAgYXR0ci5kYXRhLXZhbHVlPVwie3sgbGFuZ3VhZ2UuY29kZSB9fVwiXHJcbiAgICAgICAgICAgICAgICBhdHRyLmRhdGEtdGVzdC1pZD1cImFkcy1sYW5ndWFnZS1zZWxlY3Rvci1vcHRpb24te3sgbGFuZ3VhZ2UuY29kZSB9fVwiXHJcbiAgICAgICAgICAgICAgICBhdHRyLmRhdGEtbGFiZWw9XCJ7eyBsYW5ndWFnZS5sYWJlbCB9fVwiXHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIDxpbWdcclxuICAgICAgICAgICAgICAgICAgICBzcmM9XCJhc3NldHMvaW1hZ2VzL2ZsYWcte3sgbGFuZ3VhZ2UubG9jYWxlRXh0ZW5zaW9uIH19LnBuZ1wiXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJtci00XCJcclxuICAgICAgICAgICAgICAgICAgICBhbHQ9XCJ7eyBsYW5ndWFnZS5sYWJlbCB9fVwiXHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAge3sgbGFuZ3VhZ2UubGFiZWwgfX1cclxuICAgICAgICAgICAgPC9saT5cclxuICAgICAgICA8L3VsPlxyXG4gICAgICAgIDxmaWd1cmUgKm5nSWY9XCJjdXJyZW50TGFuZ3VhZ2VPYmplY3RcIiBjbGFzcz1cImxhbmd1YWdlLXNlbGVjdG9yX2ZsYWdcIj5cclxuICAgICAgICAgICAgPGltZ1xyXG4gICAgICAgICAgICAgICAgc3JjPVwiYXNzZXRzL2ltYWdlcy9mbGFnLXt7IGN1cnJlbnRMYW5ndWFnZU9iamVjdC5sb2NhbGVFeHRlbnNpb24gfX0ucG5nXCJcclxuICAgICAgICAgICAgICAgIGFsdD1cInt7IGN1cnJlbnRMYW5ndWFnZU9iamVjdC5sYWJlbCB9fVwiXHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgPC9maWd1cmU+XHJcbiAgICA8L2Fkcy1mb3JtLWRyb3Bkb3duPlxyXG48L25nLWNvbnRhaW5lcj5cclxuIl19