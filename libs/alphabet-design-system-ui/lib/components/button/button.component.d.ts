import { ChangeDetectorRef, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
import { IADSDecoratorsColorsFunctional, IADSDecoratorsColorsMain, IADSDecoratorsPositionIcon, IADSDecoratorsSizesButton, IADSDecoratorsTypesButton } from '../../types';
import * as i0 from "@angular/core";
export declare class ADSButtonComponent implements OnChanges {
    private readonly cdr;
    readonly clickEmitter: EventEmitter<Event>;
    color: IADSDecoratorsColorsMain | IADSDecoratorsColorsFunctional | 'destructive';
    css: string;
    disabled: boolean;
    id: string;
    icon: string;
    iconOnly: boolean;
    iconPosition: IADSDecoratorsPositionIcon;
    label: string;
    tooltip: string;
    loading: boolean;
    loadingLabel: string;
    notification: string;
    size: IADSDecoratorsSizesButton;
    tabindex: number;
    type: IADSDecoratorsTypesButton;
    ariaControls: string;
    ariaExpanded: string;
    ariaLabelledBy: string;
    constructor(cdr: ChangeDetectorRef);
    click(event: MouseEvent): void;
    isLoading(): boolean;
    isDisabled(): boolean | null;
    isIconOnly(): boolean;
    displayIcon(): boolean;
    ngOnChanges(changes: SimpleChanges): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ADSButtonComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ADSButtonComponent, "ads-button", never, { "color": "color"; "css": "css"; "disabled": "disabled"; "id": "id"; "icon": "icon"; "iconOnly": "iconOnly"; "iconPosition": "iconPosition"; "label": "label"; "tooltip": "tooltip"; "loading": "loading"; "loadingLabel": "loadingLabel"; "notification": "notification"; "size": "size"; "tabindex": "tabindex"; "type": "type"; "ariaControls": "ariaControls"; "ariaExpanded": "ariaExpanded"; "ariaLabelledBy": "ariaLabelledBy"; }, { "clickEmitter": "clickEmitter"; }, never, never, false, never>;
}
