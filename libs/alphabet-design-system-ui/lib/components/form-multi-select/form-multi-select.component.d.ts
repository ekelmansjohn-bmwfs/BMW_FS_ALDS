import { ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { IFormMultiSelectItem } from '../../types';
import { CollisionDetectionService } from '../../utils';
import * as i0 from "@angular/core";
export declare class ADSFormMultiSelectComponent implements OnChanges, ControlValueAccessor {
    private readonly windowRef;
    private readonly document;
    private readonly collisionDetection;
    private readonly cdr;
    multiselect: ElementRef;
    allSelector: boolean;
    valueAsNumberedResult: boolean;
    css: string;
    data: Array<IFormMultiSelectItem>;
    label: string;
    disabled: boolean;
    readonly optionClicked: EventEmitter<IFormMultiSelectItem>;
    readonly id: string;
    readonly allText = "All";
    private buttonElement;
    private inputElement;
    private optionsElement;
    private optionsElementItems;
    private checkboxItems;
    private selectedOption;
    private expanded;
    value: Array<string>;
    selectAll: boolean;
    displayedValue: Array<string>;
    constructor(windowRef: Window, document: Document, collisionDetection: CollisionDetectionService, cdr: ChangeDetectorRef);
    buttonClick(): void;
    show(): void;
    private hide;
    private first;
    private last;
    private next;
    private previous;
    private deselectOption;
    private selectOption;
    selectAllItems(select: boolean): void;
    selectItem(item: IFormMultiSelectItem): void;
    selectedValues(): void;
    trackByIndex(index: number): number;
    init(): void;
    ngOnChanges(changes: SimpleChanges): void;
    onChange(value: any): void;
    onTouched(): void;
    writeValue(value: Array<string>): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ADSFormMultiSelectComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ADSFormMultiSelectComponent, "ads-form-multi-select", never, { "allSelector": "allSelector"; "valueAsNumberedResult": "valueAsNumberedResult"; "css": "css"; "data": "data"; "label": "label"; "disabled": "disabled"; }, { "optionClicked": "optionClicked"; }, never, never, false, never>;
}
