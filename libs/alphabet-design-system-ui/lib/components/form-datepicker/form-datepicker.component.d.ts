import { CollisionDetectionService } from '../../utils';
import { CommonModule } from '@angular/common';
import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
import * as i0 from "@angular/core";
declare enum DatePickerStatus {
    YEARPICKER = "yearpicker",
    DAYPICKER = "daypicker",
    TIMEPICKER = "timepicker"
}
export declare class ADSFormDatepickerComponent implements AfterViewInit, OnChanges {
    private readonly commonModule;
    private readonly windowRef;
    private readonly document;
    private readonly collisionDetection;
    private readonly cdr;
    datepicker: ElementRef;
    daypicker: ElementRef;
    yearpicker: ElementRef;
    css: string;
    closedDays: Array<number> | undefined;
    disabled: boolean;
    label: string;
    initialDate: Date | undefined;
    minDate: Date | undefined;
    maxDate: Date | undefined;
    showYearPicker: boolean;
    locale: string;
    currentDatePickerStatus: DatePickerStatus;
    enableTimePicker: boolean;
    readonly selectDateEmitter: EventEmitter<any>;
    private datePipe;
    readonly id: string;
    private toggleButtonElement;
    private inputElement;
    yearpickerElementItems: Array<HTMLLIElement>;
    daypickerElementItems: Array<HTMLLIElement>;
    private readonly newValue;
    private selectedOption;
    timerId: number | undefined;
    private readonly timerInterval;
    startYear: number;
    endYear: number;
    currentYear: number;
    yearChunks: Array<Array<{
        year: number;
        disabled: boolean;
    }>>;
    currentChunkIndex: number;
    yearDatepickerStatus: DatePickerStatus;
    dayDatepickerStatus: DatePickerStatus;
    timeDatepickerStatus: DatePickerStatus;
    selectedYear: number;
    calendar: Array<Record<string, string | null | boolean | Date>>;
    expanded: boolean;
    month: number;
    year: number;
    day: number;
    hour: string;
    minutes: string;
    value: string | null;
    months: Array<string>;
    weekDays: Array<string>;
    constructor(commonModule: CommonModule, windowRef: Window, document: Document, collisionDetection: CollisionDetectionService, cdr: ChangeDetectorRef);
    setYearSelector(): void;
    toggleButtonClick(): void;
    previousMonthButtonClick(event: Event): void;
    nextMonthButtonClick(event: Event): void;
    show(): void;
    private hide;
    private initialOption;
    private selectOption;
    private createCalendar;
    private calendarDay;
    private isToday;
    private isDaySelected;
    private isWeekend;
    private isDateAvailable;
    private isClosed;
    private getFormattedDate;
    private getSelectedDate;
    trackByIndex(index: number): number;
    ngOnChanges(changes: SimpleChanges): void;
    setDate(dateToSet: string | Date | undefined): void;
    ngAfterViewInit(): void;
    onChange(value: any): void;
    onKeyDownInputElement(event: KeyboardEvent): void;
    onDayPickerClick(event: MouseEvent, date: Date | string | null | boolean): void;
    onTouched(): void;
    writeValue(value: string | Date | null | undefined): void;
    private isViewInitialized;
    selectYear(year: number): void;
    previousYearChunk(): void;
    nextYearChunk(): void;
    yearIsDisabled(year: number): boolean;
    private translateDays;
    private translateMonths;
    onBlurHours(): void;
    onBlurMinutes(): void;
    onInput(event: any): void;
    private formatNumber;
    handleHourIncrement(): void;
    handleHourDecrement(): void;
    handleMinutesIncrement(): void;
    handleMinutesDecrement(): void;
    startTimer(direction: string, timeUnit: string): void;
    stopTimer(): void;
    handleDocumentClick: (event: MouseEvent) => void;
    onTimeSubmit(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ADSFormDatepickerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ADSFormDatepickerComponent, "ads-form-datepicker", never, { "css": "css"; "closedDays": "closedDays"; "disabled": "disabled"; "label": "label"; "initialDate": "initialDate"; "minDate": "minDate"; "maxDate": "maxDate"; "showYearPicker": "showYearPicker"; "locale": "locale"; "currentDatePickerStatus": "currentDatePickerStatus"; "enableTimePicker": "enableTimePicker"; }, { "selectDateEmitter": "selectDateEmitter"; }, never, never, false, never>;
}
export {};
