import { ChangeDetectorRef, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
import { UntypedFormArray, UntypedFormBuilder } from '@angular/forms';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
import { ITable, ITableColumn, ITableData, ITableDataRow, ITableSorting, ITableTemplate } from '../../types';
import { PaginationEvent } from '../paginator/paginator.component';
import * as i0 from "@angular/core";
export type RowActionClickEvent = {
    action: string;
    row: ITableDataRow;
    clickEvent: MouseEvent;
};
export type RowValueChangeEvent = {
    row: ITableDataRow;
    column: ITableColumn;
    value: string;
};
export declare class ADSDataTableComponent implements OnChanges {
    private readonly formBuilder;
    private readonly cdr;
    private readonly sanitizer;
    data: ITable | undefined | null;
    template: ITableTemplate;
    currentLanguage: string;
    loadingLabel: string;
    errorLabel: string;
    hasError: boolean;
    hasFixedLayout: boolean;
    readonly clickEmitter: EventEmitter<RowActionClickEvent>;
    readonly rowValueChange: EventEmitter<RowValueChangeEvent>;
    readonly searchQuery: EventEmitter<{
        searchTerm: string;
    }>;
    private dataOrigin;
    private datePipe;
    emptyValueDescription: string;
    readonly tableForm: import("@angular/forms").UntypedFormGroup;
    readonly columns: UntypedFormArray;
    readonly filters: UntypedFormArray;
    readonly search: import("@angular/forms").AbstractControl<any, any> | null;
    displaySelectedOnly: boolean;
    filtersChanged: boolean;
    sorting: ITableSorting;
    tableTemplate: ITableTemplate;
    id: string;
    tableData: ITableData;
    tableDataSlice: ITableData;
    tableDataSliceStart: number;
    tableDataSliceEnd: number;
    pageIndex: number;
    pageSize: number;
    constructor(formBuilder: UntypedFormBuilder, cdr: ChangeDetectorRef, sanitizer: DomSanitizer);
    updateTableData(): void;
    private updateTableDataSlice;
    pageChanged(paginationEvent: PaginationEvent): void;
    getNumberOfResultsDisplayed(): string;
    sortByColumn(column: ITableColumn): void;
    sortTableData(): ITableData;
    private sort;
    translateSortingDirection(sortingDirection: string): string;
    getSortClass(column: ITableColumn): string;
    emitClick($event: MouseEvent, action: string, row: ITableDataRow): void;
    emitRowValueChange(column: ITableColumn, row: ITableDataRow, value: string): void;
    formSubscriptions(): void;
    trackByIndex(index: number): number;
    ngOnChanges(changes: SimpleChanges): void;
    getSanitizedHtml(html: string): SafeHtml;
    loadFilterOptions(useCache?: boolean): void;
    deselectSection(label: string): void;
    updateFiltersChanged(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ADSDataTableComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ADSDataTableComponent, "ads-data-table", never, { "data": "data"; "template": "template"; "currentLanguage": "currentLanguage"; "loadingLabel": "loadingLabel"; "errorLabel": "errorLabel"; "hasError": "hasError"; "hasFixedLayout": "hasFixedLayout"; }, { "clickEmitter": "clickEmitter"; "rowValueChange": "rowValueChange"; "searchQuery": "searchQuery"; }, never, never, false, never>;
}
